clear

mainfolder = 'D:\conversion\Old_macaque\'; %fullfile(cd, '\test_cell\');
outputfolder = 'D:\output_MATNWB\'; %[cd, '\'];
cellList = getCellNames(mainfolder);
T = readtable([mainfolder, 'manual_entry_data.csv']);
sessionTag = 'M00';  
filetag = 0;

for n = 1:length(cellList)
    
    cellID = cellList(n).name;
    disp(cellID)  
    fileList = dir([mainfolder,cellList(n,1).name,'/*.abf']);
    
    %% Initializing variables for Sweep table construction
    
    noManuTag = 0;
    sweepCount = 0;
    sweep_series_objects_ch1 = []; sweep_series_objects_ch2 = [];

    
    %% Initializing nwb file and adding first global descriptors
    nwb = NwbFile();
    nwb.identifier = cellList(n,1).name;
    nwb.session_description = ...
      'Characterizing intrinsic biophysical properties of cortical NHP neurons';
    idx = find(strcmp(T.IDS, cellID));
    if isempty(idx)
        disp('Manual entry data not found')
        noManuTag = 1;
         nwb.general_subject = types.core.Subject( ...
      'description', 'NA', 'age', 'NA', ...
      'sex', 'NA', 'species', 'NA');
       corticalArea = 'NA'; 
       initAccessResistance = 'NA';
    else    
      nwb.general_subject = types.core.Subject( ...
        'subject_id', T.SubjectID(idx), 'age', num2str(T.SubjectAge_years(idx)), ...
        'sex', T.SubjectSex(idx), 'species', T.SubjectBreed(idx), ...
        'weight', num2str(T.SubjectWeight_Kg(idx))     ... 
         );      
       corticalArea = T.TissueOrigin(idx);
       initAccessResistance = num2str(T.InitialAccessResistance(idx));
    end
     nwb.general_institution = 'University of Western Ontario';
     device_name = 'Amplifier';
     nwb.general_devices.set(device_name, ...
         types.core.Device('description', 'Axon MultiClamp 700B', ...
                                 'manufacturer', 'Molecular Devices'));
                             
     nwb.general_devices.set('Digitizer', ...
         types.core.Device('description', 'Axon Digidata 1440 or 1550', ...
                                 'manufacturer', 'Molecular Devices'));     

     if noManuTag==0 && cell2mat(T.SlicingSolution(idx))=="Choline"
       nwb.general_surgery = 'Bioopsies; Anaesthesia; choline-based slicing solution';
     end
     nwb.general_source_script = 'custom matlab script using MATNWB';
     nwb.general_source_script_file_name = mfilename;
     
     %% Add anatomical data from histological processing
     
     anatomy = types.core.ProcessingModule(...
                         'description', 'Histological processing',...
                         'dynamictable', []  ...
                               );     
                           
     table = table2nwb(T(idx,11:12));  
     anatomy.dynamictable.set('Anatomical data', table);
     nwb.processing.set('Anatomical data', anatomy);
                           
    %% loading the abf files
    paths = fullfile({fileList.folder}, {fileList.name});
    for f = 1:length(fileList)
        [data,sample_int,aquiPara] = abfload(paths{1,f}, ...
            'sweeps','a','channels','a');
    %% Getting start date from 1st recording of cell and checking for new session start 
        if f==1 
           cellStart = datetime(aquiPara.uFileStartDate, 'ConvertFrom', 'yyyymmdd' ...
            ,'TimeZone', 'local')+ seconds(aquiPara.uFileStartTimeMS/1000);
           if strcmp(sessionTag, cell2mat(T.SubjectID(idx)))
               nwb.session_start_time = sessionStart;
           else
            sessionStart = cellStart;
            nwb.session_start_time = sessionStart;
            sessionTag = cell2mat(T.SubjectID(idx));
           end 
        end
    %% load JSON files if present    
        if isfile([mainfolder,cellID,'\', fileList(f).name(1:end-3), 'json'])
          raw = fileread([mainfolder,cellID,'\', fileList(f).name(1:end-3), 'json']); 
          settingsMCC = jsondecode(raw);
          cellsFieldnames = fieldnames(settingsMCC);               
          ic_elec_name = cellsFieldnames{1, 1}(2:end);
          electOffset = settingsMCC.(cellsFieldnames{1,1}).GetPipetteOffset; 
         else
          ic_elec_name = 'unknown'; 
          electOffset = NaN;
         end 
   %% Getting run and electrode associated properties  
        device_link = types.untyped.SoftLink(['/general/devices/', device_name]); % lets see if that works
        ic_elec = types.core.IntracellularElectrode( ...
            'device', device_link, ...
            'description', 'Properties of electrode and run associated to it',...
            'filtering', '10000',...
            'initial_access_resistance',initAccessResistance,...
            'location', corticalArea...
               );
        nwb.general_intracellular_ephys.set(ic_elec_name, ic_elec);
        ic_elec_link = types.untyped.SoftLink(['/general/intracellular_ephys/' ic_elec_name]);       
    %% Data: recreating the stimulus waveform
        stimulus_name = aquiPara.protocolName(...
            find(aquiPara.protocolName=='\',1, 'last')+1:end);
        if isempty(aquiPara.DACEpoch) && ~contains(aquiPara.protocolName, 'noise')           
            nwb.acquisition.set(['Sweep_', num2str(sweepCount)], ...
            types.core.IZeroClampSeries( ...
                'bias_current', [], ... % Unit: Amp
                'bridge_balance', [], ... % Unit: Ohm
                'capacitance_compensation', [], ... % Unit: Farad
                'data', data, ...
                'data_unit', 'mV', ...
                'electrode', ic_elec_link, ...
                'stimulus_description', stimulus_name,...
                'starting_time',aquiPara.uFileStartTimeMS\1000,...
                'starting_time_rate', 1000000/sample_int...
                   ));
                           
              ccs = types.core.CurrentClampStimulusSeries( ...
                        'electrode', ic_elec_link, ...
                        'gain', NaN, ...
                        'stimulus_description', 'Long Pulse', ...
                        'data_unit', 'pA', ...
                        'data', zeros(length(data),1), ...
                        'sweep_number', sweepCount,...                     
                        'starting_time', aquiPara.uFileStartTimeMS/1000,...
                        'starting_time_rate', 1000000/sample_int...
                          );
              nwb.stimulus_presentation.set(['Sweep_', num2str(sweepCount)], ccs); 
              
              sweep_ch2 = types.untyped.ObjectView(['/acquisition/', 'Sweep_', num2str(sweepCount)]);
              sweep_ch1 = types.untyped.ObjectView(['/stimulus/presentation/', 'Sweep_', num2str(sweepCount)]);
              sweep_series_objects_ch1 = [sweep_series_objects_ch1, sweep_ch1]; 
              sweep_series_objects_ch2 = [sweep_series_objects_ch2, sweep_ch2];
              sweepCount =  sweepCount + 1;   
        elseif ~contains(aquiPara.protocolName, 'noise')      
            
            stimInd = find(aquiPara.DACEpoch.fEpochLevelInc~=0);                
            stimOnset = sum(aquiPara.DACEpoch.lEpochInitDuration(1:stimInd-1));
            stimDuration = aquiPara.DACEpoch.lEpochInitDuration(stimInd);
            
            
            if sample_int == 100 || sample_int == 50
                 constantShift = 3126; 
            elseif sample_int == 200                % shift for input versus response
               constantShift = 3124*0.5;
            end
            
%             if filetag == 0
%                LPname = aquiPara.protocolName;
%                SPname = [];
%             elseif string(aquiPara.protocolName) ~= string(LPname)  && isempty(SPname)
%                SPname = aquiPara.protocolName;
%             end
            
            for s = 1:size(data,3)
                
%                 if string(aquiPara.protocolName) == string(LPname) || ...
%                    string(aquiPara.protocolName) == string(SPname)
%                
%                     AllenTag(sweepCount,1) = 1;
%                 else
%                     AllenTag(sweepCount,1) = 0;
%                 end
                
                stimData = [zeros(1,stimOnset+constantShift), ...
                    ones(1,stimDuration).*(...
                        aquiPara.DACEpoch.fEpochInitLevel(stimInd)+ ...
                          aquiPara.DACEpoch.fEpochLevelInc(stimInd)*s),...
                             zeros(1,length(data)-...
                             stimOnset-stimDuration-constantShift)]';

                         
                ccs = types.core.CurrentClampStimulusSeries( ...
                        'electrode', ic_elec_link, ...
                        'gain', NaN, ...
                        'stimulus_description', 'Long Pulse', ...
                        'data_unit', 'pA', ...
                        'data', stimData, ...
                        'sweep_number', sweepCount,...
                        'starting_time', aquiPara.uFileStartTimeMS/1000,...
                        'starting_time_rate', 1000000/sample_int...
                        );
                    
                nwb.stimulus_presentation.set(['Sweep_', num2str(sweepCount)], ccs);    

                nwb.acquisition.set(['Sweep_', num2str(sweepCount)], ...
                    types.core.CurrentClampSeries( ...
                        'bias_current', [], ... % Unit: Amp
                        'bridge_balance', [], ... % Unit: Ohm
                        'capacitance_compensation', [], ... % Unit: Farad
                        'data', data(:,1,s), ...
                        'data_unit', aquiPara.recChUnits{:}, ...
                        'electrode', ic_elec_link, ...
                        'stimulus_description', 'long pulse', ...   
                        'sweep_number', sweepCount,...
                        'starting_time', aquiPara.uFileStartTimeMS/1000,...
                        'starting_time_rate', 1000000/sample_int...
                          ));
                    
                sweep_ch2 = types.untyped.ObjectView(['/acquisition/', 'Sweep_', num2str(sweepCount)]);
                sweep_ch1 = types.untyped.ObjectView(['/stimulus/presentation/', 'Sweep_', num2str(sweepCount)]);
                sweep_series_objects_ch1 = [sweep_series_objects_ch1, sweep_ch1]; 
                sweep_series_objects_ch2 = [sweep_series_objects_ch2, sweep_ch2];
                sweepCount =  sweepCount + 1;   
            end
            filetag = filetag + 1;        
        end
    end
    
%% Sweep table
            
    sweep_nums_vec = [[0:sweepCount-1],[0:sweepCount-1]];
%    AllenTag_vec = [AllenTag; AllenTag]';
    
     sweep_nums = types.hdmf_common.VectorData('data', sweep_nums_vec, ...
                                  'description','sweep numbers');                                     
    series_ind = types.hdmf_common.VectorIndex(...
          'data', [0:length(sweep_nums_vec)-1],...                                      % 0-based indices to sweep_series_objects
           'target', types.untyped.ObjectView('/general/intracellular_ephys/sweep_table/series'));
    series_data = types.hdmf_common.VectorData(...
                      'data', [sweep_series_objects_ch1, sweep_series_objects_ch2],...
                      'description', 'Jagged Array of Patch Clamp Series Objects');

    sweepTable = types.core.SweepTable(...
        'colnames', {'series', 'sweep_number', 'Allen_tag'},...
        'description', 'Sweep table for single electrode aquisitions; traces from current injection are reconstructed',...
        'id', types.hdmf_common.ElementIdentifiers('data',  [0:length(sweep_nums_vec)-1]),...
        'series_index', series_ind,...
        'series', series_data,...
        'sweep_number', sweep_nums...
        );

    nwb.general_intracellular_ephys_sweep_table = sweepTable;
%%    
    sessionTag = cell2mat(T.SubjectID(idx));
    filename = fullfile([outputfolder ,nwb.identifier '.nwb']);
    nwbExport(nwb, filename);
end    