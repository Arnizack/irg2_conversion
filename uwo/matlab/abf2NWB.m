function abf2NWB(varargin)

%{ 
Converts all abf files in one folder into one nwb file with the same name
First input argument is the path to the folder containing folders with abf
files. Second input argument is the path at which nwb files are saved. If
only one input argument is used the location is used for both input and
output. The NWB schema is 2.4.0
%}

check = 0;

for v = 1:nargin
    if check == 0 && (isa(varargin{v}, 'char') || isa(varargin{v}, 'string'))
        mainfolder = varargin{v};
        if endsWith(mainfolder, '\') || endsWith(mainfolder, '/')
          mainfolder(length(mainfolder)) = [];
        end
        cellList = getCellNames(mainfolder);
        check = 1;
    elseif (isa(varargin{v}, 'char') || isa(varargin{v}, 'string'))
        outputfolder = varargin{v};
        if endsWith(outputfolder, '\') || endsWith(outputfolder, '/')
          outputfolder(length(outputfolder)) = [];
        end
        disp('No overwrite mode')
        for k = 1 : length(cellList)
          baseFileName = [cellList(k).name, '.nwb'];
          fullFileName = fullfile(outputfolder, baseFileName);
          fprintf(1, 'Now deleting %s\n', fullFileName);
          delete(fullFileName);
        end
    end
end

if isfile([mainfolder, '\manual_entry_data.csv'])
  T = readtable([mainfolder, '\manual_entry_data.csv']);
else
    error('No manual entry data detected')
end
sessionTag = 'M00';  
count = 1;

for n = 1:length(cellList)
    cellID = cellList(n).name;
    cellID(cellID=='-') = '_';
    disp(cellID)  
    fileList = dir([mainfolder,'/',cellList(n,1).name,'/*.abf']);
    %% Initializing variables for Sweep table construction
    
    noManuTag = 0;
    sweepCount = 1;
    sweep_series_objects_ch1 = []; sweep_series_objects_ch2 = [];
    SweepAmp = [];StimOn = []; StimOff = []; BinaryLP = []; BinarySP = [];
    %% Initializing nwb file and adding first global descriptors
<<<<<<< Updated upstream
    nwb = NwbFile();
    nwb.identifier = cellID;
    nwb.session_description = ...
      'Characterizing intrinsic biophysical properties of cortical NHP neurons';
=======
    nwb = NwbFile( ...
        'identifier', cellList(n,1).name, ...
        'general_lab', 'Martinez-Trujillo/Inoue ', ...
        'general_institution', 'University of Western Ontario', ...
        'general_experiment_description', 'Characterizing intrinsic biophysical properties of cortical NHP neurons.', ...
        'session_description', 'A long long experimental day' ...
    );
    
>>>>>>> Stashed changes
    idx = find(strcmp(T.IDS, cellID));
    if isempty(idx)
        disp('Manual entry data not found')
        noManuTag = 1;
         nwb.general_subject = types.core.Subject( ...
      'description', 'NA', 'age', 'NA', ...
      'sex', 'NA', 'species', 'NA');
       corticalArea = 'NA'; 
       initAccessResistance = 'NaN';
    else    
      nwb.general_subject = types.core.Subject( ...
        'subject_id', T.SubjectID(idx), 'age', num2str(T.SubjectAge_years(idx)), ...
        'sex', T.SubjectSex(idx), 'species', T.SubjectBreed(idx), ...
        'weight', num2str(T.SubjectWeight_Kg(idx))     ... 
         );      
       corticalArea = T.TissueOrigin(idx);
       initAccessResistance = num2str(T.InitialAccessResistance(idx));
    end
    
    nwb.general_devices.set('Amplifier', ...
         types.core.Device('description', 'Axon MultiClamp 700B', ...
                                 'manufacturer', 'Molecular Devices'));
                             
    nwb.general_devices.set('Digitizer', ...
         types.core.Device('description', 'Axon Digidata 1440 or 1550', ...
                                 'manufacturer', 'Molecular Devices'));     
                             
     if noManuTag==0 && cell2mat(T.SlicingSolution(idx))=="Choline"
       nwb.general_surgery = 'Bioopsies; Anaesthesia; choline-based slicing solution';     
     end
     
     nwb.general_slices = 'ACSF slightly different to NeuroNex better description follows';
     nwb.general_source_script = 'custom matlab script using MATNWB';
     nwb.general_source_script_file_name = mfilename;
     
     %% Add anatomical data from histological processing
     
     anatomy = types.core.ProcessingModule(...
                         'description', 'Histological processing',...
                         'dynamictable', []  ...
                               );     
     Col1 = find(strcmpi(T.Properties.VariableNames,'SomaLayerLoc'));
     Col2 = find(strcmpi(T.Properties.VariableNames,'DendriticType'));
     table = table2nwb(T(idx, [Col1 Col2]));  
     anatomy.dynamictable.set('Anatomical data', table);
     nwb.processing.set('Anatomical data', anatomy);
                           
    %% loading the abf files
    paths = fullfile({fileList.folder}, {fileList.name});            
    for f = 1:length(fileList)
        settingsMCC = [];
        [data,sample_int,aquiPara] = abfload(paths{1,f}, ...
            'sweeps','a','channels','a');
    %% Getting start date from 1st recording of cell and checking for new session start 
        if f==1 
           cellStart = datetime(aquiPara.uFileStartDate, 'ConvertFrom', 'yyyymmdd' ...
            ,'TimeZone', 'local')+ seconds(aquiPara.uFileStartTimeMS/1000);
           if strcmp(sessionTag, cell2mat(T.SubjectID(idx)))
               nwb.session_start_time = sessionStart;
           else
            sessionStart = cellStart;
            nwb.session_start_time = sessionStart;
            sessionTag = cell2mat(T.SubjectID(idx));
           end 
        end
    %% load JSON files if present    
        if isfile([mainfolder,cellID,'\', fileList(f).name(1:end-3), 'json'])
          raw = fileread([mainfolder,cellID,'\', fileList(f).name(1:end-3), 'json']); 
          settingsMCC = jsondecode(raw);
          cellsFieldnames = fieldnames(settingsMCC);               
          ic_elec_name = cellsFieldnames{1, 1}(2:end);
          electOffset = settingsMCC.(cellsFieldnames{1,1}).GetPipetteOffset; 
         else
          ic_elec_name = 'unknown'; 
          electOffset = NaN;
        end 
         
   %% Assign parameters from settingsMCC
   if isempty(settingsMCC)
      filterFreq = 'NA';
      brigBal = [];
      holdI = [];
      capComp = [];
      PipOffset= [];
   else
       filterFreq = num2str(settingsMCC.(['x', ic_elec_name]).GetPrimarySignalLPF);
       PipOffset = settingsMCC.(['x', ic_elec_name]).GetPipetteOffset;  
       if isfield(settingsMCC.(['x', ic_elec_name]),'GetBridgeBalEnable') && ...
               settingsMCC.(['x', ic_elec_name]).GetBridgeBalEnable
          brigBal = settingsMCC.(['x', ic_elec_name]).GetBridgeBalResist;  
       else
          brigBal = 0;
       end
       if settingsMCC.(['x', ic_elec_name]).GetHoldingEnable
         holdI = settingsMCC.(['x', ic_elec_name]).GetHolding;
       else
         holdI = 0;
       end
       if isfield(settingsMCC.(['x', ic_elec_name]),'GetNeutralizationCap') && ...
               settingsMCC.(['x', ic_elec_name]).GetNeutralizationEnable  
          capComp = settingsMCC.(['x', ic_elec_name]).GetNeutralizationCap;  
       else
          capComp = 0; 
       end    
   end
   
   %% Getting run and electrode associated properties  
        device_link = types.untyped.SoftLink(['/general/devices/', 'Amplifier']);
        ic_elec = types.core.IntracellularElectrode( ...
            'device', device_link, ...
            'description', 'Properties of electrode and run associated to it',...
            'filtering', filterFreq ,...
            'initial_access_resistance',initAccessResistance,...
            'location', corticalArea,...
            'slice', ['Temperature ', num2str(T.Temperature(idx))]...
        );
        nwb.general_intracellular_ephys.set(ic_elec_name, ic_elec);
        ic_elec_link = types.untyped.SoftLink(['/general/intracellular_ephys/' ic_elec_name]);       
    %% Data: recreating the stimulus waveform
        stimulus_name = aquiPara.protocolName(...
            find(aquiPara.protocolName=='\',1, 'last')+1:end);
        
        if isempty(aquiPara.DACEpoch) && ~contains(aquiPara.protocolName, ['noise']) ...
                && ~contains(aquiPara.protocolName, ['chirp']) ...
           
            nwb.acquisition.set(['Sweep_', num2str(sweepCount-1)], ...
            types.core.IZeroClampSeries( ...
                'bridge_balance', brigBal, ... % Unit: Ohm
                'capacitance_compensation', capComp, ... % Unit: Farad
                'data', data, ...
                'data_unit', 'mV', ...
                'electrode', ic_elec_link, ...
                'stimulus_description', stimulus_name,...
                'starting_time',aquiPara.uFileStartTimeMS\1000,...
                'starting_time_rate', 1000000/sample_int,...
                'sweep_number', sweepCount ...
            ));                           
              
              sweep_ch2 = types.untyped.ObjectView(['/acquisition/', 'Sweep_', num2str(sweepCount-1)]);
              sweep_series_objects_ch2 = [sweep_series_objects_ch2, sweep_ch2];
              SweepAmp(sweepCount,1) = NaN;
              StimOff(sweepCount,1) = NaN;
              StimOn(sweepCount,1) = NaN;
              BinaryLP(sweepCount,1)  = NaN;
              BinarySP(sweepCount,1)  = NaN;
              sweepCount =  sweepCount + 1;   
              
        elseif ~contains(aquiPara.protocolName, 'noise')  
            stimInd = find(aquiPara.DACEpoch.fEpochLevelInc~=0);   
            stimDuration = aquiPara.DACEpoch.lEpochInitDuration(stimInd);
            SweepsPerFile = size(data,3);
            if  stimDuration*(sample_int/1000) == 1000 
             stimDescrp = 'Long Pulse';  
             BinaryLP(sweepCount:SweepsPerFile+sweepCount-1,1)  = 1;
             BinarySP(sweepCount:SweepsPerFile+sweepCount-1,1)  = 0;
            elseif stimDuration*(sample_int/1000) == 3
             stimDescrp = 'Short Pulse';
             BinaryLP(sweepCount:SweepsPerFile+sweepCount-1,1)  = 0;
             BinarySP(sweepCount:SweepsPerFile+sweepCount-1,1)  = 1;
            else
             disp(['Unknown stimulus type with duration of '...
                        , num2str(stimDuration*(sample_int/1000)), 'ms'])
            end
            
           [StimOn, StimOff] = GetABFstims(aquiPara, StimOn, BinaryLP, ...
                            StimOff, sweepCount, SweepsPerFile, sample_int);          

                                         
            for s = 1:SweepsPerFile
                
                SweepAmp(sweepCount,1)  =  aquiPara.DACEpoch.fEpochInitLevel(stimInd)+ ...
                          aquiPara.DACEpoch.fEpochLevelInc(stimInd)*(s-1);
                
                if  aquiPara.DACEpoch.fEpochLevelInc(stimInd) < 1          % current is in nanoAmp
                    SweepAmp(sweepCount,1)= SweepAmp(sweepCount,1)*1000;
                end
                
                stimData = [zeros(1,StimOn(sweepCount,1)), ones(1,StimOn(sweepCount,1)...
                             -StimOff(sweepCount,1)).*SweepAmp(sweepCount,1),...
                               zeros(1,length(data)- StimOff(sweepCount,1))]';

				ccss = types.core.CurrentClampStimulusSeries( ...
                        'electrode', ic_elec_link, ...
                        'gain', NaN, ...
                        'stimulus_description', stimDescrp, ...
                        'data_unit', 'pA', ...
                        'data', stimData, ...
                        'sweep_number', sweepCount,...
                        'starting_time', aquiPara.uFileStartTimeMS/1000,...
                        'starting_time_rate', 1000000/sample_int...
                        );
                    
                nwb.stimulus_presentation.set(['Sweep_', num2str(sweepCount-1)], ccss);    

                nwb.acquisition.set(['Sweep_', num2str(sweepCount-1)], ...
                    types.core.CurrentClampSeries( ...
                        'bias_current', holdI, ... % Unit: Amp
                        'bridge_balance', brigBal, ... % Unit: Ohm
                        'capacitance_compensation', capComp, ... % Unit: Farad
                        'data', data(:,1,s), ...
                        'data_unit', aquiPara.recChUnits{:}, ...
                        'electrode', ic_elec_link, ...
                        'stimulus_description', stimDescrp, ...   
                        'sweep_number', sweepCount,...
                        'starting_time', aquiPara.uFileStartTimeMS/1000,...
                        'starting_time_rate', 1000000/sample_int...
                          ));
                    
                sweep_ch2 = types.untyped.ObjectView(['/acquisition/', 'Sweep_', num2str(sweepCount-1)]);
                sweep_ch1 = types.untyped.ObjectView(['/stimulus/presentation/', 'Sweep_', num2str(sweepCount-1)]);
                sweep_series_objects_ch1 = [sweep_series_objects_ch1, sweep_ch1]; 
                sweep_series_objects_ch2 = [sweep_series_objects_ch2, sweep_ch2];
                sweepCount =  sweepCount + 1;   
            end
        end
        count = count +1;
    end    
    
%% Intracellular Recordings Table   
   if sweepCount > 5
    BinaryLP(isnan(BinaryLP)) = 0;
    BinarySP(isnan(BinarySP)) = 0;
    StimOn(isnan(StimOn)) = 0;
    StimOff(isnan(StimOff)) = 0;
    SweepAmp(isnan(SweepAmp)) = 0;
    
    StimDuration = [];
    StimDuration = StimOff - StimOn;   
     
<<<<<<< Updated upstream
     sweep_nums_vec = sweep_inds_vec + 1;
         
     sweep_nums = types.hdmf_common.VectorData('data', sweep_nums_vec, ...
                                  'description','sweep numbers');                                     
    series_ind = types.hdmf_common.VectorIndex(...
          'data', sweep_inds_vec,...                                      % 0-based indices to sweep_series_objects
           'target', types.untyped.ObjectView('/general/intracellular_ephys/sweep_table/series'), ...
           'description','sweep index for sweep table');
    series_data = types.hdmf_common.VectorData(...
                      'data', sweeppaths,...
                      'description', 'Jagged Array of Patch Clamp Series Objects');
=======
    ic_rec_table = types.core.IntracellularRecordingsTable( ...
        'categories', {'electrodes', 'stimiuli', 'responses'}, ...
        'colnames', {'recordings_tag'}, ...
        'description', [ ...
            'A table to group together a stimulus and response from a single ', ...
            'electrode and a single simultaneous recording and for storing ', ...
            'metadata about the intracellular recording.'], ...
        'id', types.hdmf_common.ElementIdentifiers( ...
            'data', int64([0:sweepCount-2]) ...
        ) ...
    );
>>>>>>> Stashed changes

    ic_rec_table.electrodes = types.core.IntracellularElectrodesTable( ...
        'description', 'Table for storing intracellular electrode related metadata.', ...
        'colnames', {'electrode'}, ...
        'id', types.hdmf_common.ElementIdentifiers( ...
            'data', int64([0:sweepCount-2]) ...
        ), ...
        'electrode', types.hdmf_common.VectorData( ...
            'data', repmat(types.untyped.ObjectView(ic_elec), sweepCount-1, 1), ...
            'description', 'Column for storing the reference to the intracellular electrode' ...
        ) ...
    );

    ic_rec_table.stimuli = types.core.IntracellularStimuliTable( ...
        'description', 'Table for storing intracellular stimulus related metadata.', ...
        'colnames', {'stimulus'}, ...
        'id', types.hdmf_common.ElementIdentifiers( ...
            'data', int64([0:sweepCount-2])  ...
        ), ...
        'stimulus', types.core.TimeSeriesReferenceVectorData( ...
            'description', 'Column storing the reference to the recorded stimulus for the recording (rows)', ...
            'data', struct( ...
                'idx_start', [StimOn(StimOn~=0)'], ...
                'count', [StimDuration(StimDuration~=0)], ...
                'timeseries', [sweep_series_objects_ch1] ...
            )...
        )...
    );
    ic_rec_table.responses = types.core.IntracellularResponsesTable( ...
        'description', 'Table for storing intracellular response related metadata.', ...
        'colnames', {'response'}, ...
        'id', types.hdmf_common.ElementIdentifiers( ...
            'data', int64([0:sweepCount-2]) ...
        ), ...
        'response', types.core.TimeSeriesReferenceVectorData( ...
            'description', 'Column storing the reference to the recorded response for the recording (rows)', ...
            'data', struct( ...
                'idx_start', [StimOn'], ...
                'count', [StimDuration], ...
                'timeseries', [sweep_series_objects_ch2]...
            )...
        )...
    );

% Add protocol type as column of electrodes table

Protocols = cell.empty;

for s = 1:length(BinaryLP)
    if BinaryLP(s)
      Protocols(s) = {'LP'};
    elseif BinarySP(s)
      Protocols(s) = {'SP'};   
    else
      Protocols(s) = {'unknown'};          
    end
end

ic_rec_table.categories = [ic_rec_table.categories, {'protocol_type'}];
ic_rec_table.dynamictable.set( ...
    'protocol_type', types.hdmf_common.DynamicTable( ...
        'description', 'category table for lab-specific recording metadata', ...
        'colnames', {'label'}, ...
        'id', types.hdmf_common.ElementIdentifiers( ...
            'data', int64([0:sweepCount-2]) ...
        ), ...
        'label', types.hdmf_common.VectorData( ...
            'data', Protocols, ...
            'description', 'Abbreviated Stimulus type: LP= Long Pulse, SP= Short Pulse' ...
        ) ...
    ) ...
);

% Add Current amplitude as column of stimulus table
 ic_rec_table.stimuli.colnames = [ic_rec_table.electrodes.colnames {'current_amplitude'}];
 ic_rec_table.stimuli.vectordata.set('current_amplitude', types.hdmf_common.VectorData( ...
    'data', [SweepAmp'], ...
    'description', 'Current amplitude of injected square pulse' ...
    ) ...
);

nwb.general_intracellular_ephys_intracellular_recordings = ic_rec_table;

%%    
    sessionTag = cell2mat(T.SubjectID(idx));
    filename = fullfile([outputfolder, '/' ,nwb.identifier '.nwb']);
    nwbExport(nwb, filename);
   end
end    